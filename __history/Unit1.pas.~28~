unit Unit1;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.ScrollBox, FMX.Memo;

type
  TForm1 = class(TForm)
    BtnAuthentication: TButton;
    BtnStamp: TButton;
    MemoResult: TMemo;
    procedure BtnAuthenticationClick(Sender: TObject);
    procedure BtnStampClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  urlHeader: string = 'http://services.test.sw.com.mx';
  userHeader: string = 'demo';
  passwordHeader: string = '123456789';
 // tokenHeader: string = 'T2lYQ0t4L0RHVkR4dHZ5Nkk1VHNEakZ3Y0J4Nk9GODZuRyt4cE1w'+
   //                     'Vm5tbXB3YVZxTHdOdHAwVXY2NTdJb1hkREtXTzE3dk9pMmdMdkFD'+
   //                     'R2xFWFVPUXpTUm9mTG1ySXdZbFNja3FRa0RlYURqbzdzdlI2UUx1'+
    //                    'WGJiKzViUWY2dnZGbFloUDJ6RjhFTGF4M1BySnJ4cHF0YjUvbmRyWW'+
    //                    'pjTkVLN3ppd3RxL0dJPQ.T2lYQ0t4L0RHVkR4dHZ5Nkk1VHNEakZ3Y'+
      //                  '0J4Nk9GODZuRyt4cE1wVm5tbFlVcU92YUJTZWlHU3pER1kySnlXRTF4a'+
       //                 'lNUS0ZWcUlVS0NhelhqaXdnWTRncklVSWVvZlFZMWNyUjVxYUFxMWFxcS'+
         //               'tUL1IzdGpHRTJqdS9Zakw2UGRiMTFPRlV3a2kyOWI5WUZHWk85ODJtU0M2UlJEUkFTVXhYTDNKZVdhOXIySE1tUVlFdm1jN3kvRStBQlpLRi9NeWJrd0R3clhpYWJrVUMwV0Mwd3FhUXdpUFF5NW5PN3J5cklMb0FETHlxVFRtRW16UW5ZVjAwUjdCa2g0Yk1iTExCeXJkVDRhMGMxOUZ1YWlIUWRRVC8yalFTNUczZXdvWlF0cSt2UW0waFZKY2gyaW5jeElydXN3clNPUDNvU1J2dm9weHBTSlZYNU9aaGsvalpQMUxrUndzK0dHS2dpTittY1JmR3o2M3NqNkh4MW9KVXMvUHhZYzVLQS9UK2E1SVhEZFJKYWx4ZmlEWDFuSXlqc2ZRYXlUQk1ldlZkU2tEdU10NFVMdHZKUURLblBxakw0SDl5bUxabDFLNmNPbEp6b3Jtd2Q1V2htRHlTdDZ6eTFRdUNnYnVvK2tuVUdhMmwrVWRCZi9rQkU9.7k2gVCGSZKLzJK5Ky3Nr5tKxvGSJhL13Q8W-YhT0uIo';

  _url : PAnsiChar;
  _user : PAnsiChar;
  _password : PAnsiChar;
  _PxmlString : PChar;
  _token : PAnsiChar;

implementation

{$R *.fmx}
Function Authentication(url, user, password : PAnsiChar): PChar; stdcall; external 'sw-sdk-cpp.dll' name 'Authentication';
Function Stamp(url, user, password, xml : PChar): PChar; stdcall; external 'sw-sdk-cpp.dll' name 'Stamp';
Function StampByToken(url, token, xml : PAnsiChar): PAnsiChar; stdcall; external 'sw-sdk-cpp.dll' name 'StampByToken';

function StringToPAnsiChar(stringVar : string) : PAnsiChar;
  Var
    AnsString : AnsiString;
    InternalError : Boolean;
  begin
    InternalError := false;
    Result := '';
    try
      if stringVar <> '' Then
      begin
         AnsString := AnsiString(StringVar);
         Result := PAnsiChar(PAnsiString(AnsString));
      end;
    Except
      InternalError := true;
    end;
    if InternalError or (String(Result) <> stringVar) then
    begin
      Raise Exception.Create('Conversion from string to PAnsiChar failed!');
    end;
  end;

function GetToken() : PChar; inline;

  begin
      _url := StringToPAnsiChar('http://services.test.sw.com.mx');
      _user := StringToPAnsiChar('demo');
      _password := StringToPAnsiChar('1234556');
      Result := Authentication(_url,_user,_password);
  end;

function GetStamp(xml : PAnsiChar) : String;

  begin
      //_url := StringToPAnsiChar(urlHeader);
      //_user := StringToPAnsiChar(userHeader);
      ///_password := StringToPAnsiChar(passwordHeader);
      //Result := Stamp(_url,_user,_password, xml);
  end;

procedure TForm1.BtnAuthenticationClick(Sender: TObject);
  var
      result : PChar;
  begin
      result := GetToken();

      MemoResult.Lines.Text := StrPas(result);
  end;

procedure TForm1.BtnStampClick(Sender: TObject);
  var
    openDialog : topendialog;
    path : string;
    myXMLFile : TextFile;
    xmlString : string;
    strTemp : string;
    result : string;
  begin
    // Create the open dialog object - assign to our open dialog variable
    openDialog := TOpenDialog.Create(self);

    // Set up the starting directory to be the current one
    openDialog.InitialDir := GetCurrentDir;

    // Allow only .dpr and .pas files to be selected
    openDialog.Filter :=
      'Archivos XML|*.xml';

    // Select pascal files as the starting filter type
    openDialog.FilterIndex := 2;

    // Display the open file dialog
    if openDialog.Execute
      then
        //ShowMessage('File : '+openDialog.FileName)
        path := openDialog.FileName
      else
        ShowMessage('Open file was cancelled');

    // Free up the dialog
    openDialog.Free;

    AssignFile(myXMLFile, path);
    Reset(myXMLFile);
    while not Eof(myXMLFile) do
       begin
         ReadLn(myXMLFile, strTemp);
         xmlString := Concat(xmlString, strTemp);
       end;
    CloseFile(myXMLFile);

    //xmlString := 'asdfasdf';
    _url := 'http://services.test.sw.com.mx';
    _user := 'demo';
    _password := '1234556';
    //_token :=  StringToPAnsiChar(tokenHeader);
    _PxmlString := PChar(xmlString);

    //ShowMessage(_PxmlString);

    //result := Stamp(_url,_user, _password, _PxmlString);
    //result := GetStamp(PxmlString);

    MemoResult.Lines.Text := Result;
  end;

end.
